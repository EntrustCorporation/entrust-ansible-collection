---
# tasks file for certificate enrollment from CA via Entrust CAGW

- name: Verify that the directory we want to use exists on the server.
  file:
    path: '{{ working_path }}'
    state: directory

## SETUP CSR TO REQUEST
- name: Generate a 2048 bit RSA private key
  openssl_privatekey:
    path: '{{ privatekey_path }}'
    passphrase: '{{ privatekey_passphrase }}'
    cipher: auto
    type: RSA
    size: 2048

- name: Generate a certificate signing request using the generated key
  openssl_csr:
    path: '{{ csr_path }}'
    privatekey_path: '{{ privatekey_path }}'
    privatekey_passphrase: '{{ privatekey_passphrase }}'
    common_name: '{{ common_name }}'
    organization_name: '{{ organization_name | default(omit) }}'
    locality_name: '{{ locality_name }}'
    country_name: '{{ country_name | default(omit) }}'
    state_or_province_name: '{{ state_or_province_name | default(omit) }}'
    digest: sha256

- name: Request a signed certificate from CA(SM/PKIaaS/MSCA) via Entrust CAGW with bare minimum parameters
  entrust.crypto.cagw_certificate:
    path: '{{ example1_cert_path }}'
    csr: "{{ csr_path }}"
    cagw_api_client_cert_path: '{{ entrust_cagw_api_cert }}'
    cagw_api_client_cert_key_path: '{{ entrust_cagw_api_cert_key }}'
    host: '{{ entrust_host }}'
    port: '{{ entrust_port }}'
    connector_name: SM
    certificate_authority_id: '{{ example1_ca_id }}'
    certificate_profile_id: '{{ example1_profile_id }}'
    request_type: '{{ example1_request_type }}'
    enrollment_format: '{{ example1_enrollment_format }}'
    cagw_api_specification_path: '{{ cagw_api_specification_path }}'
    force: '{{ force }}'
    validate_certs: '{{ validate_certs }}'

- name: Request a signed certificate from SM via Entrust CAGW with subjectAltName and custom_field parameters
  entrust.crypto.cagw_certificate:
    path: '{{ example2_cert_path }}'
    csr: '{{ csr_path }}'
    host: '{{ entrust_host }}'
    port: '{{ entrust_port }}'
    certificate_authority_id: '{{ example1_ca_id }}'
    certificate_profile_id: '{{ example1_profile_id }}'
    cagw_api_client_cert_path: '{{ entrust_cagw_api_cert }}'
    cagw_api_client_cert_key_path: '{{ entrust_cagw_api_cert_key }}'
    cagw_api_specification_path: '{{ cagw_api_specification_path }}'
    request_type: '{{ example1_request_type }}'
    enrollment_format: '{{ example1_enrollment_format }}'
    connector_name: SM
    subject_alt_name:
      dNSName: '{{ example2_dNSName }}'
      iPAddress: '{{ example2_iPAddress }}'
      directoryName: '{{ example2_directoryName }}'
      uniformResourceIdentifier: '{{ example2_uniformResourceIdentifier }}'
    custom_fields:
      text1: '{{ entrust_text1 }}'
      text2: '{{ entrust_text2 }}'
      number1: '{{ entrust_number1 }}'
      date1: '{{ entrust_date1 }}'
      email1: '{{ entrust_email1 }}'
    force: '{{ force }}'
    validate_certs: '{{ validate_certs }}'

- name: Get an already issued certificate from CAGW with valid serial num in hexadecimal format
  entrust.crypto.cagw_certificate:
    path: '{{ example3_cert_path }}'
    cagw_api_client_cert_path: '{{ entrust_cagw_api_cert }}'
    cagw_api_client_cert_key_path: '{{ entrust_cagw_api_cert_key }}'
    cagw_api_specification_path: '{{ cagw_api_specification_path }}'
    host: '{{ entrust_host }}'
    port: '{{ entrust_port }}'
    certificate_authority_id: '{{ example1_ca_id }}'
    request_type: '{{ example3_request_type }}'
    serial_no: "{{ example3_serialNumber }}"
    validate_certs: '{{ validate_certs }}'

- name: Request a PKCS12 from Entrust CAGW
  entrust.crypto.cagw_certificate:
    path: '{{ example4_cert_path }}'
    dn: '{{ example4_dn }}'
    host: '{{ entrust_host }}'
    port: '{{ entrust_port }}'
    certificate_authority_id: '{{ example4_ca_id }}'
    certificate_profile_id: '{{ example4_profile_id }}'
    cagw_api_client_cert_path: '{{ entrust_cagw_api_cert }}'
    cagw_api_client_cert_key_path: '{{ entrust_cagw_api_cert_key }}'
    cagw_api_specification_path: '{{ cagw_api_specification_path }}'
    request_type: '{{ example4_request_type }}'
    enrollment_format: '{{ example4_enrollment_format }}'
    connector_name: SM
    p12_protection_password: '{{ example4_p12_password }}'
    force: '{{ force }}'
    validate_certs: '{{ validate_certs }}'

- name: Request a new SSL certificate from ECS via CAGW with bare minimum parameters.  Will request a new certificate
  entrust.crypto.cagw_certificate:
    path: '{{ example5_cert_path }}'
    csr: '{{ csr_path }}'
    host: '{{ entrust_host }}'
    port: '{{ entrust_port }}'
    certificate_authority_id: '{{ example5_ca_id }}'
    certificate_profile_id: '{{ example5_profile_id }}'
    cagw_api_client_cert_path: '{{ entrust_cagw_api_cert }}'
    cagw_api_client_cert_key_path: '{{ entrust_cagw_api_cert_key }}'
    cagw_api_specification_path: '{{ cagw_api_specification_path }}'
    request_type: '{{ example5_request_type }}'
    enrollment_format: '{{ example5_enrollment_format }}'
    connector_name: ECS
    requester_name: '{{ entrust_requester_name }}'
    requester_email: '{{ entrust_requester_email }}'
    requester_phone: '{{ entrust_requester_phone }}'
    force: '{{ force }}'
    validate_certs: '{{ validate_certs }}'

- name: Take an action(HoldAction/UnholdAction/RevokeAction) on certificate already recieved from CAGW
  entrust.crypto.cagw_certificate:
    cagw_api_client_cert_path: '{{ entrust_cagw_api_cert }}'
    cagw_api_client_cert_key_path: '{{ entrust_cagw_api_cert_key }}'
    cagw_api_specification_path: '{{ cagw_api_specification_path }}'
    host: '{{ entrust_host }}'
    port: '{{ entrust_port }}'
    certificate_authority_id: '{{ example1_ca_id }}'
    request_type: '{{ example6_request_type }}'
    action_type: '{{ example6_action_type }}'
    action_reason: '{{ example6_action_reason }}'
    serial_no: "{{ example6_serialNumber }}"
    validate_certs: '{{ validate_certs }}'
