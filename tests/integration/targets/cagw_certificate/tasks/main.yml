---
# Copyright (c) Ansible Project
# GNU General Public License v3.0+ (see LICENSES/GPL-3.0-or-later.txt or https://www.gnu.org/licenses/gpl-3.0.txt)
# SPDX-License-Identifier: GPL-3.0-or-later

####################################################################
# WARNING: These are designed specifically for Ansible tests       #
# and should not be used as examples of how to write Ansible roles #
####################################################################

## Verify that integration_config was specified
- name: Task block for integration.config
  block:
    - name: Task block for integration.config
      ansible.builtin.assert:
        that:
          - cagw_api_client_cert_path is defined
          - cagw_api_client_cert_key_path is defined
          - entrust_cagw_api_specification_path is defined

## SET UP TEST ENVIRONMENT ########################################################################
- name: Clear out the temporary directory for storing the API connection information
  ansible.builtin.file:
    path: '{{ tmpdir_path }}'
    state: absent

- name: Create a directory for storing the API connection Information
  ansible.builtin.file:
    path: '{{ tmpdir_path }}'
    state: directory
    mode: '0744'

- name: Copy the files needed for the connection to entrust API to the host
  ansible.builtin.copy:
    src: '{{ cagw_api_client_cert_path }}'
    dest: '{{ entrust_cagw_api_cert }}'
    mode: preserve

- name: Copy the files needed for the connection to entrust API to the host
  ansible.builtin.copy:
    src: '{{ cagw_api_client_cert_key_path }}'
    dest: '{{ entrust_cagw_api_cert_key }}'
    mode: preserve

- name: Copy the files needed for the connection to entrust API to the host
  ansible.builtin.copy:
    src: '{{ entrust_cagw_api_specification_path }}'
    dest: '{{ cagw_api_specification_path }}'
    mode: preserve

## Setup CSR and PrivateKey
- name: Create CSR and private key
  ansible.builtin.command: openssl req -nodes -newkey rsa:2048 -keyout {{ privatekey_path }} -out {{ csr_path }} -subj {{ csr_dn }}
  changed_when: false

- name: Generate a certificate signing request for Microsoft CA using the generated key
  ansible.builtin.command: openssl req -nodes -newkey rsa:2048 -keyout {{ example11_privatekey_path }} -out {{ example11_csr_path }}
                           -subj {{ example11_csr_dn }}
  changed_when: false

- name: Task block for Entrust CAGW tests
  block:
    - name: Request a signed certificate from SM via Entrust CAGW with bare minimum parameters
      entrust.crypto.cagw_certificate:
        path: '{{ example1_cert_path }}'
        csr: '{{ csr_path }}'
        host: '{{ entrust_host }}'
        port: '{{ entrust_port }}'
        certificate_authority_id: '{{ example1_ca_id }}'
        certificate_profile_id: '{{ example1_profile_id }}'
        cagw_api_client_cert_path: '{{ entrust_cagw_api_cert }}'
        cagw_api_client_cert_key_path: '{{ entrust_cagw_api_cert_key }}'
        cagw_api_specification_path: '{{ cagw_api_specification_path }}'
        request_type: '{{ example1_request_type }}'
        enrollment_format: '{{ example1_enrollment_format }}'
        connector_name: SM
        force: '{{ force }}'
        validate_certs: '{{ validate_certs }}'
      register: example1_result

    - name: Assert for example 1
      ansible.builtin.assert:
        that:
          - example1_result is not failed
          - example1_result.changed
          - example1_result.serialNumber is string
          - example1_result.message.message is match("Enrollment was successful.")

    - name: Request a signed certificate from SM via Entrust CAGW with subjectAltName and custom_field parameters
      entrust.crypto.cagw_certificate:
        path: '{{ example2_cert_path }}'
        csr: '{{ csr_path }}'
        host: '{{ entrust_host }}'
        port: '{{ entrust_port }}'
        certificate_authority_id: '{{ example1_ca_id }}'
        certificate_profile_id: '{{ example1_profile_id }}'
        cagw_api_client_cert_path: '{{ entrust_cagw_api_cert }}'
        cagw_api_client_cert_key_path: '{{ entrust_cagw_api_cert_key }}'
        cagw_api_specification_path: '{{ cagw_api_specification_path }}'
        request_type: '{{ example1_request_type }}'
        enrollment_format: '{{ example1_enrollment_format }}'
        connector_name: SM
        subject_alt_name:
          dNSName: '{{ example2_dnsname }}'
          iPAddress: '{{ example2_ipaddress }}'
          directoryName: '{{ example2_directoryname }}'
          uniformResourceIdentifier: '{{ example2_uri }}'
        custom_fields:
          text1: '{{ entrust_text1 }}'
          text2: '{{ entrust_text2 }}'
          number1: '{{ entrust_number1 }}'
          date1: '{{ entrust_date1 }}'
          email1: '{{ entrust_email1 }}'
        force: '{{ force }}'
        validate_certs: '{{ validate_certs }}'
      register: example2_result

    - name: Assert for example 2
      ansible.builtin.assert:
        that:
          - example2_result is not failed
          - example2_result.changed
          - example2_result.serialNumber is string
          - example2_result.message.message is match("Enrollment was successful.")

    - name: Get an already issued certificate from CAGW with valid serial num in hexadecimal format
      entrust.crypto.cagw_certificate:
        path: '{{ example3_cert_path }}'
        cagw_api_client_cert_path: '{{ entrust_cagw_api_cert }}'
        cagw_api_client_cert_key_path: '{{ entrust_cagw_api_cert_key }}'
        cagw_api_specification_path: '{{ cagw_api_specification_path }}'
        host: '{{ entrust_host }}'
        port: '{{ entrust_port }}'
        certificate_authority_id: '{{ example1_ca_id }}'
        request_type: '{{ example3_request_type }}'
        serial_no: "{{ example2_result['serialNumber'] }}"
        validate_certs: '{{ validate_certs }}'
      register: example3_result

    - name: Assert for example 3
      ansible.builtin.assert:
        that:
          - example3_result is not failed
          - example3_result.cert_details.status is match("normal")

    - name: Request a PKCS12 from Entrust CAGW
      entrust.crypto.cagw_certificate:
        path: '{{ example4_cert_path }}'
        dn: '{{ example4_dn }}'
        host: '{{ entrust_host }}'
        port: '{{ entrust_port }}'
        certificate_authority_id: '{{ example4_ca_id }}'
        certificate_profile_id: '{{ example4_profile_id }}'
        cagw_api_client_cert_path: '{{ entrust_cagw_api_cert }}'
        cagw_api_client_cert_key_path: '{{ entrust_cagw_api_cert_key }}'
        cagw_api_specification_path: '{{ cagw_api_specification_path }}'
        request_type: '{{ example4_request_type }}'
        enrollment_format: '{{ example4_enrollment_format }}'
        connector_name: SM
        p12_protection_password: '{{ example4_p12_password }}'
        force: '{{ force }}'
        validate_certs: '{{ validate_certs }}'
      register: example4_result

    - name: Assert for example 4
      ansible.builtin.assert:
        that:
          - example4_result is not failed
          - example4_result.changed
          - example4_result.cert_status is match("ACCEPTED")
          - example4_result.message.message is match("Enrollment was successful.")

    - name: Request a new SSL certificate from ECS via CAGW with bare minimum parameters.  Will request a new certificate
      entrust.crypto.cagw_certificate:
        path: '{{ example5_cert_path }}'
        csr: '{{ csr_path }}'
        host: '{{ entrust_host }}'
        port: '{{ entrust_port }}'
        certificate_authority_id: '{{ example5_ca_id }}'
        certificate_profile_id: '{{ example5_profile_id }}'
        cagw_api_client_cert_path: '{{ entrust_cagw_api_cert }}'
        cagw_api_client_cert_key_path: '{{ entrust_cagw_api_cert_key }}'
        cagw_api_specification_path: '{{ cagw_api_specification_path }}'
        request_type: '{{ example5_request_type }}'
        enrollment_format: '{{ example5_enrollment_format }}'
        connector_name: ECS
        requester_name: '{{ entrust_requester_name }}'
        requester_email: '{{ entrust_requester_email }}'
        force: '{{ force }}'
        validate_certs: '{{ validate_certs }}'
      register: example5_result

    - name: Assert for example 5
      ansible.builtin.assert:
        that:
          - example5_result is not failed
          - example5_result.changed
          - example5_result.serialNumber is string
          - example5_result.message.message is match("Enrollment was successful.")

    - name: Take an action(HoldAction) on certificate already recieved from CAGW
      entrust.crypto.cagw_certificate:
        cagw_api_client_cert_path: '{{ entrust_cagw_api_cert }}'
        cagw_api_client_cert_key_path: '{{ entrust_cagw_api_cert_key }}'
        cagw_api_specification_path: '{{ cagw_api_specification_path }}'
        host: '{{ entrust_host }}'
        port: '{{ entrust_port }}'
        certificate_authority_id: '{{ example1_ca_id }}'
        request_type: '{{ example6_request_type }}'
        action_type: '{{ example6_action_type }}'
        action_reason: '{{ example6_action_reason }}'
        serial_no: "{{ example2_result['serialNumber'] }}"
        validate_certs: '{{ validate_certs }}'
      register: example6_result

    - name: Assert for example 6
      ansible.builtin.assert:
        that:
          - example6_result is not failed
          - example6_result.cert_details.status is match("COMPLETED")

    - name: Take an action(UnholdAction) on certificate already recieved from CAGW
      entrust.crypto.cagw_certificate:
        cagw_api_client_cert_path: '{{ entrust_cagw_api_cert }}'
        cagw_api_client_cert_key_path: '{{ entrust_cagw_api_cert_key }}'
        cagw_api_specification_path: '{{ cagw_api_specification_path }}'
        host: '{{ entrust_host }}'
        port: '{{ entrust_port }}'
        certificate_authority_id: '{{ example1_ca_id }}'
        request_type: '{{ example7_request_type }}'
        action_type: '{{ example7_action_type }}'
        action_reason: '{{ example7_action_reason }}'
        serial_no: "{{ example2_result['serialNumber'] }}"
        validate_certs: '{{ validate_certs }}'
      register: example7_result

    - name: Assert for example 7
      ansible.builtin.assert:
        that:
          - example7_result is not failed
          - example7_result.cert_details.status is match("COMPLETED")

    - name: Take an action(RevokeAction) on certificate already recieved from CAGW
      entrust.crypto.cagw_certificate:
        cagw_api_client_cert_path: '{{ entrust_cagw_api_cert }}'
        cagw_api_client_cert_key_path: '{{ entrust_cagw_api_cert_key }}'
        cagw_api_specification_path: '{{ cagw_api_specification_path }}'
        host: '{{ entrust_host }}'
        port: '{{ entrust_port }}'
        certificate_authority_id: '{{ example1_ca_id }}'
        request_type: '{{ example8_request_type }}'
        action_type: '{{ example8_action_type }}'
        action_reason: '{{ example8_action_reason }}'
        serial_no: "{{ example1_result['serialNumber'] }}"
        validate_certs: '{{ validate_certs }}'
      register: example8_result

    - name: Assert for example 8
      ansible.builtin.assert:
        that:
          - example8_result is not failed
          - example8_result.cert_details.status is match("COMPLETED")

    - name: Get a revoked certificate from CAGW
      entrust.crypto.cagw_certificate:
        path: '{{ example9_cert_path }}'
        cagw_api_client_cert_path: '{{ entrust_cagw_api_cert }}'
        cagw_api_client_cert_key_path: '{{ entrust_cagw_api_cert_key }}'
        cagw_api_specification_path: '{{ cagw_api_specification_path }}'
        host: '{{ entrust_host }}'
        port: '{{ entrust_port }}'
        certificate_authority_id: '{{ example1_ca_id }}'
        request_type: '{{ example9_request_type }}'
        serial_no: "{{ example1_result['serialNumber'] }}"
        validate_certs: '{{ validate_certs }}'
      register: example9_result

    - name: Assert for example 9
      ansible.builtin.assert:
        that:
          - example9_result is not failed
          - example9_result.cert_details.status is match("revoked")

    - name: Enroll a certificate from PKIaas CA via Entrust CAGW
      entrust.crypto.cagw_certificate:
        path: '{{ example10_cert_path }}'
        csr: '{{ csr_path }}'
        host: '{{ example10_entrust_host }}'
        certificate_authority_id: '{{ example10_ca_id }}'
        certificate_profile_id: '{{ example10_profile_id }}'
        request_type: '{{ example10_request_type }}'
        enrollment_format: '{{ example10_enrollment_format }}'
        connector_name: PKIaaS
        dn: 'CN=SapnaTestCert,O=FG Corp,OU=CHUB DEV,L=Gander,ST=Newfoundland and Labrador,C=CA'
        cagw_api_client_cert_path: '{{ example10_cagw_api_cert }}'
        cagw_api_client_cert_key_path: '{{ example10_cagw_api_key }}'
        cagw_api_specification_path: '{{ cagw_api_specification_path }}'
        validate_certs: '{{ validate_certs }}'
      register: example10_result

    - name: Assert for example 10
      ansible.builtin.assert:
        that:
          - example10_result is not failed
          - example10_result.changed
          - example10_result.serialNumber is string
          - example10_result.message.message is match("Enrollment was successful.")

    - name: Enroll a certificate from Microsoft CA via Entrust CAGW
      entrust.crypto.cagw_certificate:
        path: '{{ example11_cert_path }}'
        csr: '{{ example11_csr_path }}'
        host: '{{ example11_entrust_host }}'
        port: '{{ example11_entrust_port }}'
        certificate_authority_id: '{{ example11_ca_id }}'
        certificate_profile_id: '{{ example11_profile_id }}'
        request_type: '{{ example11_request_type }}'
        enrollment_format: '{{ example11_enrollment_format }}'
        connector_name: MSCA
        cagw_api_client_cert_path: '{{ example11_cagw_api_cert }}'
        cagw_api_client_cert_key_path: '{{ example11_cagw_api_key }}'
        cagw_api_specification_path: '{{ cagw_api_specification_path }}'
        validate_certs: '{{ validate_certs }}'
      register: example11_result

    - name: Assert for example 11
      ansible.builtin.assert:
        that:
          - example11_result is not failed
          - example11_result.changed
          - example11_result.serialNumber is string
          - example11_result.message.message is match("Enrollment was successful.")

  always:
    - name: Clean-up temporary folder
      ansible.builtin.file:
        path: '{{ tmpdir_path }}'
        state: absent
